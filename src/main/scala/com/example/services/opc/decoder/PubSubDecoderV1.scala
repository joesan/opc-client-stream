package com.example.services.opc.decoder

import java.nio.{ByteBuffer, ByteOrder}
import java.util
import java.util.BitSet

import com.example.services.opc.decoder.OpcUaPubSubTypes.NetworkMessageType
import com.example.services.opc.decoder.PubSubDecoderV1.PublisherIDTypes.PublisherIDType

import scala.annotation.tailrec


object PubSubDecoderV1 extends App {

  val knownPublisherIds = Seq("Pub1") // TODO: read this from the external configuration file

  val meta = "145 132 8 45 0 0 0 65 56 48 48 48 95 67 80 56 48 50 120 95 101 115 115 101 110 95 108 97 98 95 67 80 95 56 48 50 49 95 50 95 71 70 49 56 49 56 49 56 49 56 49 56 2 19 0 232 3 3 0 0 0 0 0 0 0 44 0 0 0 104 116 116 112 58 47 47 115 105 101 109 101 110 115 46 99 111 109 47 101 110 101 114 103 121 47 115 99 104 101 109 97 47 111 112 99 117 97 47 112 115 47 118 50 36 0 0 0 104 116 116 112 115 58 47 47 109 105 110 100 115 112 104 101 114 101 46 105 111 47 79 80 67 85 65 80 117 98 83 117 98 47 118 51 5 0 0 0 1 1 1 0 0 0 8 0 0 0 83 80 83 86 97 108 117 101 1 0 76 0 1 0 22 0 0 0 0 0 3 0 0 0 8 0 0 0 86 97 108 117 101 95 113 99 0 1 0 7 0 255 255 255 255 255 255 255 255 0 0 0 0 0 5 0 0 0 95 116 105 109 101 0 1 0 13 0 255 255 255 255 255 255 255 255 0 0 0 0 0 5 0 0 0 86 97 108 117 101 0 1 0 1 0 255 255 255 255 255 255 255 255 0 0 0 0 0 1 1 2 0 0 0 8 0 0 0 68 80 83 86 97 108 117 101 1 0 76 0 1 0 22 0 0 0 0 0 3 0 0 0 8 0 0 0 86 97 108 117 101 95 113 99 0 1 0 7 0 255 255 255 255 255 255 255 255 0 0 0 0 0 5 0 0 0 95 116 105 109 101 0 1 0 13 0 255 255 255 255 255 255 255 255 0 0 0 0 0 5 0 0 0 86 97 108 117 101 0 1 0 3 0 255 255 255 255 255 255 255 255 0 0 0 0 0 1 1 4 0 0 0 12 0 0 0 83 116 101 112 80 111 115 86 97 108 117 101 1 0 76 0 1 0 22 0 0 0 0 0 4 0 0 0 8 0 0 0 86 97 108 117 101 95 113 99 0 1 0 7 0 255 255 255 255 255 255 255 255 0 0 0 0 0 5 0 0 0 95 116 105 109 101 0 1 0 13 0 255 255 255 255 255 255 255 255 0 0 0 0 0 5 0 0 0 86 97 108 117 101 0 1 0 6 0 255 255 255 255 255 255 255 255 0 0 0 0 0 9 0 0 0 84 114 97 110 115 105 101 110 116 0 1 0 1 0 255 255 255 255 255 255 255 255 0 0 0 0 0 1 1 3 0 0 0 13 0 0 0 77 101 97 115 117 114 101 100 86 97 108 117 101 1 0 76 0 1 0 22 0 0 0 0 0 3 0 0 0 8 0 0 0 86 97 108 117 101 95 113 99 0 1 0 7 0 255 255 255 255 255 255 255 255 0 0 0 0 0 5 0 0 0 95 116 105 109 101 0 1 0 13 0 255 255 255 255 255 255 255 255 0 0 0 0 0 5 0 0 0 86 97 108 117 101 0 1 0 10 0 255 255 255 255 255 255 255 255 0 0 0 0 0 1 1 5 0 0 0 12 0 0 0 67 111 117 110 116 101 114 86 97 108 117 101 1 0 76 0 1 0 22 0 0 0 0 0 4 0 0 0 8 0 0 0 86 97 108 117 101 95 113 99 0 1 0 7 0 255 255 255 255 255 255 255 255 0 0 0 0 0 5 0 0 0 95 116 105 109 101 0 1 0 13 0 255 255 255 255 255 255 255 255 0 0 0 0 0 5 0 0 0 86 97 108 117 101 0 1 0 8 0 255 255 255 255 255 255 255 255 0 0 0 0 0 3 0 0 0 81 84 89 0 1 0 10 0 255 255 255 255 255 255 255 255 0 0 0 0 0 255 255 255 255 255 255 255 255 15 0 0 0 83 73 69 77 69 78 83 95 68 97 116 97 115 101 116 0 46 0 0 0 56 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 70 97 117 108 116 68 105 114 101 99 116 105 111 110 95 65 46 70 101 104 108 101 114 114 105 99 104 116 117 110 103 58 72 117 109 98 111 108 100 115 116 114 2 56 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 70 97 117 108 116 68 105 114 101 99 116 105 111 110 95 65 46 70 101 104 108 101 114 114 105 99 104 116 117 110 103 58 72 117 109 98 111 108 100 115 116 114 1 0 0 0 0 1 0 0 0 1 22 1 1 1 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 0 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 0 0 0 0 20 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 83 119 105 116 99 104 2 20 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 83 119 105 116 99 104 1 0 0 0 0 1 0 0 0 1 22 1 1 2 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 1 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 0 0 0 0 54 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 70 97 117 108 116 68 105 114 101 99 116 105 111 110 95 66 46 70 101 104 108 101 114 114 105 99 104 116 117 110 103 58 71 117 103 101 108 115 116 114 2 54 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 70 97 117 108 116 68 105 114 101 99 116 105 111 110 95 66 46 70 101 104 108 101 114 114 105 99 104 116 117 110 103 58 71 117 103 101 108 115 116 114 1 0 0 0 0 1 0 0 0 1 22 1 1 1 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 2 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 0 0 0 0 27 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 83 119 105 116 99 104 69 97 114 116 104 101 100 2 27 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 83 119 105 116 99 104 69 97 114 116 104 101 100 1 0 0 0 0 1 0 0 0 1 22 1 1 2 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 3 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 0 0 0 0 32 0 0 0 76 86 47 66 97 121 51 95 49 107 120 122 52 46 49 54 48 65 47 67 117 114 114 101 110 116 95 78 46 73 76 78 2 32 0 0 0 76 86 47 66 97 121 51 95 49 107 120 122 52 46 49 54 48 65 47 67 117 114 114 101 110 116 95 78 46 73 76 78 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 4 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 65 27 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 67 111 115 80 104 105 46 67 111 115 80 104 105 2 27 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 67 111 115 80 104 105 46 67 111 115 80 104 105 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 5 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 0 0 0 0 7 0 0 0 77 86 47 70 117 115 101 2 7 0 0 0 77 86 47 70 117 115 101 1 0 0 0 0 1 0 0 0 1 22 1 1 1 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 6 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 0 0 0 0 47 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 70 97 117 108 116 105 110 100 105 99 97 116 105 111 110 46 72 117 109 98 111 108 100 115 116 114 46 70 101 104 108 101 114 2 47 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 70 97 117 108 116 105 110 100 105 99 97 116 105 111 110 46 72 117 109 98 111 108 100 115 116 114 46 70 101 104 108 101 114 1 0 0 0 0 1 0 0 0 1 22 1 1 1 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 7 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 0 0 0 0 27 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 67 117 114 114 101 110 116 95 65 46 73 76 49 2 27 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 67 117 114 114 101 110 116 95 65 46 73 76 49 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 8 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 65 27 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 67 117 114 114 101 110 116 95 66 46 73 76 50 2 27 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 67 117 114 114 101 110 116 95 66 46 73 76 50 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 9 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 65 28 0 0 0 65 108 97 114 109 47 116 114 97 110 115 102 111 114 109 46 79 101 108 115 116 97 110 100 104 111 99 104 2 28 0 0 0 65 108 97 114 109 47 116 114 97 110 115 102 111 114 109 46 79 101 108 115 116 97 110 100 104 111 99 104 1 0 0 0 0 1 0 0 0 1 22 1 1 1 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 10 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 0 0 0 0 31 0 0 0 65 108 97 114 109 47 116 114 97 110 115 102 111 114 109 46 79 101 108 115 116 97 110 100 110 105 101 100 114 105 103 2 31 0 0 0 65 108 97 114 109 47 116 114 97 110 115 102 111 114 109 46 79 101 108 115 116 97 110 100 110 105 101 100 114 105 103 1 0 0 0 0 1 0 0 0 1 22 1 1 1 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 11 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 0 0 0 0 27 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 67 117 114 114 101 110 116 95 67 46 73 76 51 2 27 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 67 117 114 114 101 110 116 95 67 46 73 76 51 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 12 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 65 23 0 0 0 65 108 97 114 109 47 119 97 118 101 115 46 87 97 115 115 101 114 115 116 97 110 100 2 23 0 0 0 65 108 97 114 109 46 119 97 118 101 115 46 87 97 115 115 101 114 115 116 97 110 100 1 0 0 0 0 1 0 0 0 1 22 1 1 1 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 13 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 0 0 0 0 23 0 0 0 76 86 47 66 97 121 49 95 49 107 120 122 51 46 49 54 48 65 47 70 117 115 101 2 23 0 0 0 76 86 47 66 97 121 49 95 49 107 120 122 51 46 49 54 48 65 47 70 117 115 101 1 0 0 0 0 1 0 0 0 1 22 1 1 2 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 14 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 0 0 0 0 25 0 0 0 76 86 47 66 97 121 51 95 49 107 120 122 52 46 49 54 48 65 47 83 119 105 116 99 104 2 25 0 0 0 76 86 47 66 97 121 51 95 49 107 120 122 52 46 49 54 48 65 47 83 119 105 116 99 104 1 0 0 0 0 1 0 0 0 1 22 1 1 2 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 15 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 0 0 0 0 27 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 67 117 114 114 101 110 116 95 78 46 73 76 78 2 27 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 67 117 114 114 101 110 116 95 78 46 73 76 78 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 16 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 65 29 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 86 111 108 116 97 103 101 95 65 66 46 85 49 45 50 2 29 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 86 111 108 116 97 103 101 95 65 66 46 85 49 45 50 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 17 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 86 29 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 86 111 108 116 97 103 101 95 66 67 46 85 50 45 51 2 29 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 86 111 108 116 97 103 101 95 66 67 46 85 50 45 51 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 18 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 86 29 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 86 111 108 116 97 103 101 95 67 65 46 85 51 45 49 2 29 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 86 111 108 116 97 103 101 95 67 65 46 85 51 45 49 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 19 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 86 47 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 51 80 104 95 65 99 116 105 118 101 95 80 111 119 101 114 46 51 80 104 97 115 101 110 76 101 105 115 116 117 110 103 80 2 47 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 51 80 104 95 65 99 116 105 118 101 95 80 111 119 101 114 46 51 80 104 97 115 101 110 76 101 105 115 116 117 110 103 80 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 20 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 1 0 0 0 107 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 87 49 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 51 80 104 95 65 112 112 97 114 101 110 116 95 80 111 119 101 114 46 51 80 104 97 115 101 110 76 101 105 115 116 117 110 103 83 2 49 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 51 80 104 95 65 112 112 97 114 101 110 116 95 80 111 119 101 114 46 51 80 104 97 115 101 110 76 101 105 115 116 117 110 103 83 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 21 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 1 0 0 0 107 1 0 4 0 0 0 85 110 105 116 12 2 0 0 0 86 97 49 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 51 80 104 95 82 101 97 99 116 105 118 101 95 80 111 119 101 114 46 51 80 104 97 115 101 110 76 101 105 115 116 117 110 103 81 2 49 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 51 80 104 95 82 101 97 99 116 105 118 101 95 80 111 119 101 114 46 51 80 104 97 115 101 110 76 101 105 115 116 117 110 103 81 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 22 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 1 0 0 0 107 1 0 4 0 0 0 85 110 105 116 12 3 0 0 0 86 97 114 44 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 77 101 97 115 117 114 101 109 101 110 116 46 70 101 114 110 115 101 104 108 97 117 116 115 116 97 101 114 107 101 2 44 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 77 101 97 115 117 114 101 109 101 110 116 46 70 101 114 110 115 101 104 108 97 117 116 115 116 97 101 114 107 101 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 23 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 1 0 0 0 100 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 66 42 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 84 101 109 112 95 70 117 115 101 95 65 46 84 101 109 112 83 105 99 104 101 114 117 110 103 73 76 49 2 42 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 84 101 109 112 95 70 117 115 101 95 65 46 84 101 109 112 83 105 99 104 101 114 117 110 103 73 76 49 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 24 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 67 42 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 84 101 109 112 95 70 117 115 101 95 66 46 84 101 109 112 83 105 99 104 101 114 117 110 103 73 76 50 2 42 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 84 101 109 112 95 70 117 115 101 95 66 46 84 101 109 112 83 105 99 104 101 114 117 110 103 73 76 50 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 25 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 67 42 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 84 101 109 112 95 70 117 115 101 95 67 46 84 101 109 112 83 105 99 104 101 114 117 110 103 73 76 51 2 42 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 84 101 109 112 95 70 117 115 101 95 67 46 84 101 109 112 83 105 99 104 101 114 117 110 103 73 76 51 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 26 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 67 34 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 84 101 109 112 46 66 111 100 101 110 116 101 109 112 101 114 97 116 117 114 2 34 0 0 0 77 86 47 82 49 95 70 49 46 49 50 107 86 47 84 101 109 112 46 66 111 100 101 110 116 101 109 112 101 114 97 116 117 114 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 27 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 67 44 0 0 0 76 86 47 66 97 121 51 95 49 107 120 122 52 46 49 54 48 65 47 84 101 109 112 95 70 117 115 101 95 65 46 84 101 109 112 101 114 97 116 117 114 73 76 49 2 44 0 0 0 76 86 47 66 97 121 51 95 49 107 120 122 52 46 49 54 48 65 47 84 101 109 112 95 70 117 115 101 95 65 46 84 101 109 112 101 114 97 116 117 114 73 76 49 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 28 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 67 44 0 0 0 76 86 47 66 97 121 51 95 49 107 120 122 52 46 49 54 48 65 47 84 101 109 112 95 70 117 115 101 95 66 46 84 101 109 112 101 114 97 116 117 114 73 76 50 2 44 0 0 0 76 86 47 66 97 121 51 95 49 107 120 122 52 46 49 54 48 65 47 84 101 109 112 95 70 117 115 101 95 66 46 84 101 109 112 101 114 97 116 117 114 73 76 50 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 29 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 67 44 0 0 0 76 86 47 66 97 121 51 95 49 107 120 122 52 46 49 54 48 65 47 84 101 109 112 95 70 117 115 101 95 67 46 84 101 109 112 101 114 97 116 117 114 73 76 51 2 44 0 0 0 76 86 47 66 97 121 51 95 49 107 120 122 52 46 49 54 48 65 47 84 101 109 112 95 70 117 115 101 95 67 46 84 101 109 112 101 114 97 116 117 114 73 76 51 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 30 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 67 32 0 0 0 76 86 47 66 97 121 51 95 49 107 120 122 52 46 49 54 48 65 47 67 117 114 114 101 110 116 95 65 46 73 76 49 2 32 0 0 0 76 86 47 66 97 121 51 95 49 107 120 122 52 46 49 54 48 65 47 67 117 114 114 101 110 116 95 65 46 73 76 49 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 31 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 65 32 0 0 0 76 86 47 66 97 121 51 95 49 107 120 122 52 46 49 54 48 65 47 67 117 114 114 101 110 116 95 66 46 73 76 50 2 32 0 0 0 76 86 47 66 97 121 51 95 49 107 120 122 52 46 49 54 48 65 47 67 117 114 114 101 110 116 95 66 46 73 76 50 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 32 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 65 32 0 0 0 76 86 47 66 97 121 51 95 49 107 120 122 52 46 49 54 48 65 47 67 117 114 114 101 110 116 95 67 46 73 76 51 2 32 0 0 0 76 86 47 66 97 121 51 95 49 107 120 122 52 46 49 54 48 65 47 67 117 114 114 101 110 116 95 67 46 73 76 51 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 33 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 65 31 0 0 0 76 86 47 66 97 121 51 95 49 107 120 122 52 46 49 54 48 65 47 86 111 108 116 97 103 101 95 65 46 85 49 2 31 0 0 0 76 86 47 66 97 121 51 95 49 107 120 122 52 46 49 54 48 65 47 86 111 108 116 97 103 101 95 65 46 85 49 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 34 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 86 31 0 0 0 76 86 47 66 97 121 51 95 49 107 120 122 52 46 49 54 48 65 47 86 111 108 116 97 103 101 95 66 46 85 50 2 31 0 0 0 76 86 47 66 97 121 51 95 49 107 120 122 52 46 49 54 48 65 47 86 111 108 116 97 103 101 95 66 46 85 50 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 35 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 86 31 0 0 0 76 86 47 66 97 121 51 95 49 107 120 122 52 46 49 54 48 65 47 86 111 108 116 97 103 101 95 67 46 85 51 2 31 0 0 0 76 86 47 66 97 121 51 95 49 107 120 122 52 46 49 54 48 65 47 86 111 108 116 97 103 101 95 67 46 85 51 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 36 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 86 23 0 0 0 76 86 47 66 117 115 98 97 114 47 67 111 115 80 104 105 46 67 111 115 80 104 105 2 23 0 0 0 76 86 47 66 117 115 98 97 114 47 67 111 115 80 104 105 46 67 111 115 80 104 105 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 37 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 0 0 0 0 23 0 0 0 76 86 47 66 117 115 98 97 114 47 67 117 114 114 101 110 116 95 65 46 73 76 49 2 23 0 0 0 76 86 47 66 117 115 98 97 114 47 67 117 114 114 101 110 116 95 65 46 73 76 49 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 38 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 65 23 0 0 0 76 86 47 66 117 115 98 97 114 47 67 117 114 114 101 110 116 95 66 46 73 76 50 2 23 0 0 0 76 86 47 66 117 115 98 97 114 47 67 117 114 114 101 110 116 95 66 46 73 76 50 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 39 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 65 23 0 0 0 76 86 47 66 117 115 98 97 114 47 67 117 114 114 101 110 116 95 67 46 73 76 51 2 23 0 0 0 76 86 47 66 117 115 98 97 114 47 67 117 114 114 101 110 116 95 67 46 73 76 51 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 40 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 65 40 0 0 0 76 86 47 66 117 115 98 97 114 47 77 101 97 115 117 114 101 109 101 110 116 46 70 101 114 110 115 101 104 108 97 117 116 115 116 97 101 114 107 101 2 39 0 0 0 76 86 47 66 117 115 98 97 114 47 77 101 97 115 117 114 101 109 101 110 116 70 101 114 110 115 101 104 108 97 117 116 115 116 97 101 114 107 101 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 41 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 1 0 0 0 100 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 66 23 0 0 0 76 86 47 66 117 115 98 97 114 47 67 117 114 114 101 110 116 95 78 46 73 76 78 2 23 0 0 0 76 86 47 66 117 115 98 97 114 47 67 117 114 114 101 110 116 95 78 46 73 76 78 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 42 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 65 25 0 0 0 76 86 47 66 117 115 98 97 114 47 86 111 108 116 97 103 101 95 65 78 46 85 49 45 78 2 25 0 0 0 76 86 47 66 117 115 98 97 114 47 86 111 108 116 97 103 101 95 65 78 46 85 49 45 78 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 43 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 86 25 0 0 0 76 86 47 66 117 115 98 97 114 47 86 111 108 116 97 103 101 95 66 78 46 85 50 45 78 2 25 0 0 0 76 86 47 66 117 115 98 97 114 47 86 111 108 116 97 103 101 95 66 78 46 85 50 45 78 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 44 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 86 25 0 0 0 76 86 47 66 117 115 98 97 114 47 86 111 108 116 97 103 101 95 67 78 46 85 51 45 78 2 25 0 0 0 76 86 47 66 117 115 98 97 114 47 86 111 108 116 97 103 101 95 67 78 46 85 51 45 78 1 0 0 0 0 1 0 0 0 1 22 1 1 3 0 255 255 255 255 255 255 255 255 0 0 0 0 71 70 49 56 49 56 49 56 49 56 49 56 232 3 45 0 2 0 0 0 1 0 6 0 0 0 80 114 101 102 105 120 12 0 0 0 0 1 0 4 0 0 0 85 110 105 116 12 1 0 0 0 86 50 95 71 70 49 56 49 56 49 56 49 56 49 56 23 252 100 28 187 36 100 28 187 36 0 0 0 0"
  val delta = "209 4 45 0 0 0 65 56 48 48 48 95 67 80 56 48 50 120 95 101 115 115 101 110 95 108 97 98 95 67 80 95 56 48 50 49 95 50 95 71 70 49 56 49 56 49 56 49 56 49 56 1 232 3 235 1 160 42 100 28 187 36 100 28 187 36 6 0 0 0 0 0 8 0 128 60 200 197 209 57 213 1 0 1 0 0 0 8 0 128 60 200 197 209 57 213 1 0 2 0 0 0 8 0 128 60 200 197 209 57 213 1 0 3 0 0 0 8 0 128 60 200 197 209 57 213 1 0 6 0 0 0 8 0 128 60 200 197 209 57 213 1 0 7 0 0 0 8 0 128 60 200 197 209 57 213 1 0"

  val bytes = meta.getBytes("utf-8")
  val strArray = meta.split(" ")
  val first = strArray(0).getBytes("utf-8").map(_.toBinaryString)

  val binStrings = bytes.map(_.toBinaryString).take(2)
  binStrings foreach println

  val header = meta(0) & 0x0F
  val flags = meta(0) >> 4

  def toBinary(n: Int): String = n.toBinaryString

  // Extract k bits from the byte starting at the given pos
  def extractBits(byte: Int, k: Int, pos: Int): Int = ((1 << k) - 1) & (byte >> (pos - 1))
  def extractBits(byte: Byte, k: Int, pos: Int): String = byte.toBinaryString.toSeq.slice(pos, pos + k).mkString("")

  /**
    * TODO: Scaladoc for better understanding
    * @param b
    * @param range
    * @return
    */
  def byte2Int(b: Byte, range: Range = 0 to 7): Int = {
    Integer.parseInt(
      (range flatMap toHighBit(b)).fold("")(_ ++ _),
      2
    )
  }

  def toHighBit(byte: Byte)(shift: Int): Option[String] = {
    if (((byte >> shift) & 1) == 1) Some("1")
    else None
  }

  def thunk(byte: Byte, elem: Int): String = {
    val pow2 = Math.pow(2, elem - 1).toInt
    if ((pow2 & byte) == 0) "0"
    else "1"
  }

  def bitValueAsString(byte: Byte, range: Range = 1 to 8): String = {
    new Character(bitValueAsInt(byte, range).toChar).toString
  }

  def bitValueAsInt(byte: Byte, range: Range = 1 to 8): Int = {
    Integer.parseInt(range
      .map(elem => thunk(byte, elem))
      .reverse
      .fold("")(_ ++ _),2
    )
  }

  def bitValueAsBoolean(byte: Byte, bytePosition: Byte): Boolean = {
      val pow2 = Math.pow(2, bytePosition - 1).toInt
      if ((pow2 & byte) == 0) false
      else true
  }

  object PublisherIDTypes {
    sealed abstract class PublisherIDType(val int: Int)
    case object UByte  extends PublisherIDType(int = 0) // 000 in binary
    case object UInt16 extends PublisherIDType(int = 1) // 001 in binary
    case object UInt32 extends PublisherIDType(int = 2) // 010 in binary
    case object UInt64 extends PublisherIDType(int = 3) // 011 in binary
    case object String extends PublisherIDType(int = 4) // 100 in binary
  }

  object NetworkMessageTypes {
    sealed abstract class NetworkMessageType(val int: Int)
    case object DataSetMessageType    extends NetworkMessageType(int = 0) // 000 in binary
    case object DiscoveryRequestType  extends NetworkMessageType(int = 1) // 001 in binary
    case object DiscoveryResponseType extends NetworkMessageType(int = 2) // 010 in binary
  }

  // 145 in byte is 10010001
  def parseNetworkMessageHeader(bytes: Seq[Byte], parsePosition: Int = 0): Unit = {
    // ********** ********** Byte 0 ********** ********** //
    // Bit range 0-3: Version of the UADP NetworkMessage
    val uadpVersion = bitValueAsInt(bytes.head,1 to 4)
    // Bit range 4-7 contains the flags
    val publisherIdEnabled = bitValueAsBoolean(bytes.head, 5)
    val groupHeaderEnabled = bitValueAsBoolean(bytes.head, 6)
    val payloadHeaderEnabled = bitValueAsBoolean(bytes.head, 7)
    val extendedFlags1Enabled = bitValueAsBoolean(bytes.head, 8)

    // ********** ********** Byte 1 ********** ********** //
    // Contains the ExtendedFlags1 booleans if extendedFlags1Enabled from Byte1 is enabled
    if (extendedFlags1Enabled) {
      // Bit range 0-2 is the PublisherIdType
      val publisherIdType = bitValueAsInt(bytes(1),1 to 3) match {
        case 0 => PublisherIDTypes.UByte
        case 1 => PublisherIDTypes.UInt16
        case 2 => PublisherIDTypes.UInt32
        case 3 => PublisherIDTypes.UInt64
        case 4 => PublisherIDTypes.String
        case _ => PublisherIDTypes.UByte  // This is the default
      }
      val dataSetClassIDEnabled = bitValueAsBoolean(bytes(1), 4)
      val securityEnabled = bitValueAsBoolean(bytes(1), 5)
      val timeStampEnabled = bitValueAsBoolean(bytes(1), 6)
      val picoSecondsEnabled = bitValueAsBoolean(bytes(1), 7)
      val extendedFlags2Enabled = bitValueAsBoolean(bytes(1), 8)

      println(s"publisherIdType $publisherIdType")
      println(s"publisherIdType $dataSetClassIDEnabled")
      println(s"securityEnabled $securityEnabled")
      println(s"timeStampEnabled $timeStampEnabled")
      println(s"picoSecondsEnabled $picoSecondsEnabled")
      println(s"extendedFlags2Enabled $extendedFlags2Enabled")

      // ********** ********** Byte 2 ********** ********** //
      // Contains the ExtendedFlags2 booleans if extendedFlags1Enabled from Byte2 is enabled
      if (extendedFlags2Enabled) {
        val isChunkMessage = bitValueAsBoolean(bytes(2), 1)
        val promotedFieldsEnabled = bitValueAsBoolean(bytes(2), 2)
        val networkMessageType = bitValueAsInt(bytes(1),3 to 5) match {
          case 0 => NetworkMessageTypes.DataSetMessageType
          case 1 => NetworkMessageTypes.DiscoveryRequestType
          case 2 => NetworkMessageTypes.DiscoveryResponseType
          case _ => NetworkMessageTypes.DataSetMessageType     // This seems to be the default
        }
      } else {
        val networkMessageType = NetworkMessageTypes.DataSetMessageType
      }

      // ********** ********** Byte 3 to Byte N ********** ********** //
      // Contains the PublisherID (Shall be omitted if bit 4 of the UADPFlags is false)
      @tailrec // Alternatively get the length of the known PublisherID
      def probePublisherId(bytes: Seq[Byte], bytePosition: Int = 0, somePubId: Option[String] = None): (Int, Option[String]) = knownPublisherIds match {
        case Nil => (bytePosition, somePubId)
        case x :: xs if somePubId.isEmpty =>
          if (x == bitValueAsString(bytes(bytePosition)))
            probePublisherId(bytes, bytePosition, somePubId)
          else
            probePublisherId(bytes.drop(bytePosition), bytePosition + 1, somePubId)
        case _ if somePubId.isDefined => (bytePosition, somePubId)
      }
      val publisherID = if (publisherIdEnabled) {
        probePublisherId(bytes.drop(3))
      } else None
    }

    println(s"uadpVersion $uadpVersion")
    println(s"publisherIdEnabled $publisherIdEnabled")
    println(s"groupHeaderEnabled $groupHeaderEnabled")
    println(s"payloadHeaderEnabled $payloadHeaderEnabled")
    println(s"extendedFlags1Enabled $extendedFlags1Enabled")

  }
  parseNetworkMessageHeader(meta.split(" ").map(_.toInt.byteValue()))

  case class NetworkMessageHeader(
    version: Int,
    publisherIdEnabled: Boolean = false,
    groupHeaderEnabled: Boolean = false,
    payloadHeaderEnabled: Boolean = false,
    extendedFlags1Enabled: Boolean = false,
    extendedFlags1: ExtendedFlags1,
    extendedFlags2: ExtendedFlags2,
    publisherID: String,
    dataSetClassId: String
  )

  case class ExtendedFlags1(
    publisherIdType: PublisherIDTypes.PublisherIDType = PublisherIDTypes.UByte,
    dataSetClassIDEnabled: Boolean = false,
    securityEnabled: Boolean = false,
    timeStampEnabled: Boolean = false,
    picoSecondsEnabled: Boolean = false,
    extendedFlags2Enabled: Boolean = false
  ) {
    def default = ExtendedFlags1()
  }
  case class ExtendedFlags2(
    isChunkMessage: Boolean = false,
    promotedFieldsEnabled: Boolean = false,
    networkMessageType: NetworkMessageTypes.NetworkMessageType = NetworkMessageTypes.DataSetMessageType
  ) {
    def default = ExtendedFlags2()
  }
}
